@implements IAsyncDisposable

@using System.Globalization
@using BlazorSvgEditor.SvgEditor.Helper


<div class="@_containerCssClass" style="@_containerCssStyle height: 100%; width: 100%; touch-action: none" @ref="_containerElementReference"
     @onwheel="OnContainerWheel"
     oncontextmenu="return false"
     @ontouchstart="OnTouchStart"
     @ontouchmove="OnTouchMove"
     @ontouchend="OnTouchEnd"
     @onpointerdown="OnContainerPointerDown"
     @onpointermove="OnContainerPointerMove"
     @onpointerup="OnContainerPointerUp">


    @if (ShowLoadingSpinner)
    {
        @LoadingSpinner
    }
    else
    {
        <svg style="height: 100%; width: 100%;">


            <g style="transform: translate(@(Translate.X.ToInvString())px, @(Translate.Y.ToInvString())px) scale(@Scale.ToInvString())" viewbox="0 0 @ImageSize.Width @ImageSize.Height">

                <image class="@(EnableImageManipulations ? "svg-img-filter" : "")" href="@ImageSource" />

                <rect height="@(ImageSize.Height)px" fill="transparent" width="@(ImageSize.Width)px" @onpointerdown="OnUnselectPanelPointerDown"></rect>

                @foreach (var shape in Shapes)
                {
                    <DynamicComponent Type="shape.Presenter" Parameters="@(new Dictionary<string, object>() { { "SvgElement", shape } })" />
                }
            </g>

            @if (ShowDiagnosticInformation)
            {
                <foreignObject height="94px" width="240px" class="unselectable" x="0" y="0" style="font-size:14px;pointer-events:none;touch-action:none; background-color: white">
                    <b>Scale</b> 1:@(Math.Round(Scale, 3).ToString())
                    <br />
                    <b>Translate:</b> X: @(Math.Round(Translate.X, 1))px Y: @(Math.Round(Translate.Y, 1))px
                    <br />
                    <b>Pointer Offset:</b> X: @(_pointerPosition.X)px Y: @(_pointerPosition.Y)px
                    <br />
                    <b>Detransform:</b> X: @(Math.Round((_pointerPosition.X - Translate.X) / Scale, 1))px Y: @(Math.Round(_pointerPosition.Y / Scale - Translate.Y / Scale, 1))px
                </foreignObject>

                <foreignObject height="46px" width="250px" class="unselectable" x="0px" y="100" style="font-size:14px;pointer-events:none;touch-action:none; background-color: white">
                    <b>ContainerBox:</b> X: @(Math.Round(_containerBoundingBox.Width, 1))px Y: @(Math.Round(_containerBoundingBox.Height, 1))px
                </foreignObject>

                <foreignObject visibility="hidden" height="120px" width="300px" class="unselectable" x="0px" y="150" style="font-size:14px;pointer-events:none;touch-action:none; background-color: white">
                    @foreach (var shape in Shapes)
                    {
                        @shape.ToString()
                        <br />
                    }
                </foreignObject>
            }

        </svg>

    }

</div>

@if (EnableImageManipulations)
{
    <style>
        .svg-img-filter {
            filter: brightness(@(ImageManipulations?.Brightness)%) contrast(@(ImageManipulations?.Contrast)%) saturate(@(ImageManipulations?.Saturation)%) hue-rotate(@(ImageManipulations?.Hue)deg)
        }
    </style>
}

<style>
    .unselectable {
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

    .cursor-add-shape {
        cursor: crosshair;
    }
</style>
